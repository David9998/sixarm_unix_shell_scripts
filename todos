#!/bin/bash
#
# Find TODO lines in files.
#
# Syntax:
#
#   todos [options that are passed along to _ripgrep_]
#
# Example:
#
#   todos
#
# Example to show two lines of context before and after:
#
#   todos -C 2
#
# This script searches a comment string and keyword string.
#
# Comment string:
#
#   * `#` typical shell, Perl, Ruby, etc.
#   * `//` typical single-line comment in C, Java, etc.
#   * `/*` typical multi-line comment in C, Java, etc.
#   * `*` typical ongoing comment
#   * `--` typical SQL
#
# Keyword string:
#
#   * TODO
#   * DO
#   * DOABLE
#   * DOING
#   * DONE
#   * REDO
#   * FIX
#   * FIXME
#   * OPTIMIZE
#   * DEPRECATE
#   * REFACTOR
#   * DELETE
#   * AUDIT
#   * DANGER
#   * WTF
#
# The search uses the command `ripgrep`, which is
# a lot like the command `grep` plus faster and friendlier
# for source code such as code within git repositories.
#
# The output will show the file names, line numbers,
# and colorize the match hits if you have color set up.
#
# The search is recursive by default, and skips some directories
# such as ".git", and skips some files such as binary blogs.
#
# You can tune the behavior as you like by using any
# of the `ripgrep` options; this script passes the options along.
#
# If you prefer using the _grep_ command, or _ack_ command,
# then you can easily edit this script to your taste.
#
# Version: 2.0.0
# Created: 2014-02-12
# Updated: 2015-01-25
# License: GPL
# Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)
##
set -euf
rg "(#|//|/\*|\*|--) *(TODO|FIX|FIXME|OPTIMIZE|DEPRECATE|REFACTOR|DELETE|AUDIT|DANGER|WTF)\b" "$@"
